---
output-dir: docs
title: "TD Biodiversité"
author: Arthur Oulès, adapté de [Thibaut Jombart (2013)](http://adegenet.r-forge.r-project.org/files/MSc-intro-phylo.1.1.pdf)
editor: source
format:
  html:
    toc: true
    toc-title: Sommaire
    toc-location: left
    code-tools:
      source: https://github.com/Arthur-Oules/TD_Biodiversite/blob/main/biodiversity_tutorial.qmd
    code-fold: true
    code-summary: Afficher le code
    code-copy: true
    link-external-newwindow: true
    link-external-icon: true
    lang: fr
---

# Installation de R et RStudio

Dans ce TP/TD, nous allons utiliser le language de programmation R et plus particulièrement depuis RStudio, un Environnement de Développmenet Intégré (IDE).
Pour l'installation de R et Rstudio, le plus simple est encore de se rendre [directement sur le site de RStudio](https://posit.co/download/rstudio-desktop/) et de se laisser guider.

La première étape est d'installer R, ici, le site de RStudio nous redirige vers la page d'accueil du CRAN (The Comprehensive R Archive Network) qui liste les différentes distributions de R dans sa version la plus récente. Ici, je vous laisse choisir la version qui correspond à votre système d'exploitation. Si vous avez un vieux système d'exploitation, il sera peut-être nécessaire d'installer une ancienne distribution de R.

# Installation des packages

Revenons au CRAN, en plus de stocker différentes version de R disponibles partout dans le monde, cette archive est sera aussi notre principale source de packages. Les packages sont des extensions à la version de base de R, codées soit en R soit en C ou Fortran compilé et souvent créés avec une utilisation précise en tête, par exemple, au hasard, la construction d'arbres phylogénétiques.


```{r}
#| echo: false
#| eval: false

install.packages("here")
install.packages("tidyverse")
install.packages("rentrez")

install.packages("ape")
install.packages("phangorn")

install.packages("viridis")
```

Notre seconde source de package sera [Bioconductor](https://www.bioconductor.org/) qui centralise de nombreux packages avec des usages très orientés vers la bioinformatique et tout particulièrement le traitement de données issues de wet-lab.\
Cette fois, sur une installation de zéro, il faut commencer par installer BiocManager, un package qui permet d'accéder au dépôt Bioconductor directement depuis R. On utilise ensuite une fonction interne à ce package, d'où le préfixe `BiocManager::` avant la fonction, pour télécharger et installer un package de ce dépôt.

```{r}
#| echo: false
#| eval: false

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("msa")
BiocManager::install("ggtree")
```

# Chargement des packages et données

## Chargement des packages

Une fois un package installé, vous devriez le voir apparaître dans l'onglet package dans la fenêtre en bas à droite par défaut de RStudio. Une manière de charger manuellement un package est de cocher la case tout à gauche qui lui est associée, sinon on peut utiliser les commandes suivantes :

```{r}
#| output: false
#| warning: false

# For data manipulation
library(here)
library(tidyverse)
library(reshape2)
library(rentrez)

# For Phylogenetics
library(ape)
library(msa)
library(phangorn)

# For visualization
library(ggtree)
library(viridis)
```

Pour le beau geste, une version plus compacte :

```{r}
#| echo: false
#| eval: false

c("here", "tidyverse", "reshape2", "rentrez", "ape", "msa", "phanghorn",
  "ggtree", "viridis") |>
  lapply(library, character.only = TRUE) |> invisible()
```


## Chargement des fonctions externes

Pour nous simplifier la tâche, j'ai préparé quelques fonctions en avance que nous allons charger avec la fonction `source()`.\
C'est aussi l'occasion de vous présenter le package `here` et l'organisation de son code en "Projets" via à RStudio.

```{r}
source(here("functions", "tidy_functions.R"))
```

# Préliminaires

Dans le cadre de ce TP/TD, nous allons apprendre à générer des arbres phylogénétiques à partir de séquences ADN récupérées sur GenBank par diverses méthodes de construction d'arbre et les comparer entre elles.

Quel est le protocole général pour construire un arbre phylogénétique à partir de séquences ADN ?

# Acquisition des séquences

Nous allons commencer par récupérer les séquences d’intérêts sur Genbank directement depuis `R`.\
Qu'est-ce que GenBank ? (5 min)

## Chargement des données

Charger le fichier `data/usflu.annot.csv` avec la fonction `read_csv()` et le visualiser. (5 min)

```{r}
#| error: false
#| warning: false

annotations <- read_csv(
  file           = here("data", "usflu.annot.csv"),
  show_col_types = FALSE
) |> select(c(-1))

view(annotations)
```

Aller sur [GenBank](https://www.ncbi.nlm.nih.gov/nucleotide/) et entrer un numéro d'accès dans la barre de recherche. À quoi correspond-t-elle ?\
Pourquoi l'indication "Segment 4" ?\
À quoi correspond la protéine codée par ce gène ? Quel est le rapport avec le nom du variant ?\
Pouvez-vous faire des prédictions sur l'évolution de ces séquences ? (10 min)

## Récupération des séquences par lot

Nous allons télécharger les séquences correspondantes depuis Genbank avec le package `rentrez` (ne pas faire tourner le bloc sauf avec une bonne connexion internet).

```{r}
#| error: false
#| warning: false

annotations |>
  mutate("sequences" = Vectorize(Get_sequence)(accession)) |> 
  select(c(accession, sequences)) |> 
  write_to_fasta(path = here("output", "usflu_sequences.fasta"))

shell(here("output", "usflu_sequences.fasta"))
```

# Alignement des séquences
Rappeler le principe de l'alignement de séquences. (5min)\

Le package `msa` (Multiple Sequence Alignment) permet d'utiliser les algorithmes classiques d'alignement de multiples séquences directement depuis `R`.\
Ouvrir la page d'aide de la fonction `msa()`.\
Quels sont les algorithmes disponibles ? Sous quelle forme doit-on fournir les séquences à la fonction ? (5 min)\
Commencer par ouvrir le fichier fasta généré dans un format accepté par la fonction `msa()`. 

```{r}
usflu_sequences <- readDNAStringSet(file = here("output", "usflu_sequences.fasta"))
usflu_sequences
```

On va utiliser l'algorithme MUSCLE pour générer notre alignement.\
Utiliser la fonction `msa()` avec les bons paramètres pour générer un alignement. (5 min)

```{r}
alignment <- usflu_sequences |> msa(method = "Muscle", type = "dna", order = "input")

alignment |>
  msaConvert(type = "phangorn::phyDat") |> 
  phangorn::write.phyDat(here("output", "alignement.fasta"), format = "fasta")

msaR(here("output", "alignement.fasta"), menu = FALSE, overviewbox = F)
```

Maintenant que nous avons aligné nos séquences, nous pouvons passer à la suite !\
Rappeler les différentes méthodes de construction d'arbres phylogénétiques que vous connaissez. (5 min)

# Méthode de distances

Rappeler le principe des méthodes de distance et en citer deux exemples.\
Quelles sont les différences entre ces méthodes ? (5 min)

## Génération de la matrice de distances

Nous allons générer une matrice des distances à partir de nos alignements à l'aide la fonction `dist.dna()`. Ouvrir l'aide de cette fonction.\
Combien de modèles de substitution sont disponibles ? Comparer à la fonction `dist.ml()`. Aller sur [ce lien](http://www.iqtree.org/doc/Substitution-Models) (et [celui-ci](https://en.wikipedia.org/wiki/Models_of_DNA_evolution) pour approfondir) et regarder les différents modèles.\
Quelles sont les différences entre ces modèles ? Nous allons utiliser le modèle `TN93`, pourquoi ce nom ? Quelles sont ses particularités ? (5 min)\
Utiliser la fonction `dist.dna()` pour générer une matrice de distance.

```{r}
# alignment_BIN <- adegenet::fasta2DNAbin(here("output", "alignment.fa"))
alignment_BIN <- alignment |> msaConvert(type = "ape::DNAbin") 
distance_matrix <- alignment_BIN |>
  dist.dna(model = "TN93")
```

Nous allons visualiser la matrice de distance avec ggplot. Décrire la structure de cette portion de code. (5 min)

```{r}
distance_matrix |>
  as.matrix() |> melt() |>
  ggplot(mapping = aes(x = Var1, y = Var2, fill = value)) +
  geom_raster() +
  scale_fill_viridis() +
  ggtitle("Heatmap de la matrice des distances") +
  theme(
    axis.title = element_blank()
  )
```
Pourquoi les valeurs en diagonale de la matrice sont nulles ? Identifiez-vous des tendances ? (5 min)

## Génération et visualisation de l'arbre par UPGMA

Générer et visualiser un arbre avec l'algorithme UPGMA à l'aide des fonction `upgma()` et `plot()`. Commenter cet arbre. (5 min)

```{r}
UPGMA_tree <- upgma(distance_matrix)
plot(UPGMA_tree, main = "Arbre UPGMA", cex = .6)
# ggtree(UPGMA_tree) + geom_tiplab() + ggtitle("Arbre UPGMA")
```

## Génération de l'arbre par Neighbour-Joining

Ouvrir l'aide de la fonction `NJ()`. Générer l'arbre et le visualiser avec la fonction plot().

```{r}
NJ_tree <- distance_matrix |> NJ()
plot(NJ_tree)
```
Nous allons en profiter pour explorer la structure des arbres phylogénétiques en tant qu'objet sur R.\
Pour commencer, explorer la structure de l'objet `NJ_tree` à l'aide de la fonction `class()` et de l'opérateur `$`\
Lire la documentation de la fonction `read.tree`.\
Enregistrer l'arbre dans un fichier `.txt` à l'aide de la fonction `ape::write.tree()`. Comment est structuré ce fichier texte ?\
Utiliser les fonctions `plot()` et `nodelabel()` pour afficher l'arbre et les numéros des nœuds. (10 min)

```{r}
class(NJ_tree)
NJ_tree
NJ_tree |> ape::write.tree(here("output", "NJ_tree.txt"))
plot(NJ_tree, cex = .6)
nodelabels(frame = "none", cex = .6)
```

Nous allons voir comment visualiser ce même arbre en utilisant le package ggtree.\
Commenter le bloc de code suivant. Cette représentation vous semble-t-elle pertinente pour cette méthode ? (5 min)

```{r}
#| error: false
#| warning: false
ggtree(NJ_tree) + geom_tiplab() + geom_nodelab() + ggtitle("NJ non raciné")
```

Ajoutons des annotations à cet arbre :

```{r}
#| error: false
#| warning: false
ggtree(NJ_tree, layout = "circular") %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  ggtitle("NJ non raciné") +
  theme(legend.position = "right")
```

A quoi correspondent les couleurs des feuilles de l'arbre ?\
Nous allons raciner l'arbre de manière arbitraire. À partir de la figure précédente, quelle séquence vous semble pertinente pour raciner l'arbre ?\
Raciner l'arbre à l'aide de la fonction `root()`. (5 min)\

```{r}
NJ_tree_rooted <- NJ_tree |> root(outgroup = "CY012128") |> ladderize()
ggtree(NJ_tree_rooted) %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  ggtitle("NJ raciné") +
  theme(legend.position = "right") +
  geom_rootedge(rootedge = .01) +
  theme_tree2()
```

Commenter cet arbre. (5 min)

## Quelle méthode choisir ?

On va se servir de la matrice de distance d'origine pour tester l'adéquation de la méthode choisie pour reconstruire l'arbre aux données de départ.

```{r}
data_NJ <- data.frame(
    x = as.vector(distance_matrix),
    y = NJ_tree_rooted |> cophenetic() |> as.dist() |> as.vector()
)

corcoeff <- cor(data_NJ$x, data_NJ$y)^2

ggplot(data = data_NJ, mapping = aes(x = x, y = y)) +
  geom_point() +
  geom_smooth(method = "lm", color = "red", size = .8) +
  annotate("text", x = .025, y = .055, color = "red",
    label = paste0("Coefficient de correlation = ", as.character(corcoeff))) +
  ggtitle("Est-ce que le NJ est approprié ?") +
  xlab("Distances par paires d'origine") +
  ylab("Distances par paires de l'arbre") +
  theme_bw()
```
Lire l'aide de la fonction `cophenetic()`. Quelle valeur calcule-t-elle ? Quel type d'objet renvoie-t-elle ?\
Que représente ce graphique ? Comment l'interpréter ?\
Comment est calculé le coefficient de corrélation ? (10 min)\
\
Recommençons avec l'arbre généré par UPGMA :

```{r}
data_UPGMA <- data.frame(
    x = as.vector(distance_matrix),
    y = UPGMA_tree |> cophenetic() |> as.dist() |> as.vector()
)
ggplot(
  data = data_UPGMA,
  mapping = aes(x = x, y = y)
) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  ggtitle("Est-ce que l'UPGMA est appropriée ?") +
  xlab("Distances par paires d'origine") +
  ylab("Distances par paires de l'arbre") +
  theme_bw()
cor(data_UPGMA$x, data_UPGMA$y)^2
```
Qu'en concluez-vous sur cette méthode par rapport au Neighbour-Joining ? (5 min)

## Bootstrap
Rappeler le principe du Bootstrap.\
À quoi sert-il dans ce contexte ? (5 min)

### Calcul des valeurs de Bootstrap

Nous allons générer les indices de bootstrap pour chaque nœud de l'arbre.\
Commenter le bloc de code suivant :
```{r}
bootstrap_rooted_NJ <- boot.phylo(
  NJ_tree_rooted,
  alignment_BIN,
  \(x) {x |>
      dist.dna(model = "TN93") |>
      nj() |> 
      root(outgroup = "CY012128")
  }
)
NJ_tree_rooted$node.label <- bootstrap_rooted_NJ
```

### Impression de l'arbre bootstrappé
Nous allons afficher l'arbre précédent avec les valeurs de bootstrap que nous venons de calculer :
```{r}
options(ignore.negative.edge=TRUE)
ggtree(NJ_tree_rooted) %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  geom_label2(
    aes(
      subset = !isTip,
      label = label,
    )
  ) +
  ggtitle("NJ raciné avec Bootstrap") +
  theme(legend.position = "right") +
  geom_rootedge(rootedge = .01) +
  theme_tree2()
```
Commenter cet arbre. Comment améliorer cet arbre en considérant les valeurs de bootstrap ? (5 min)

### On retire les noeuds faibles

Commenter le bloc de code suivant :
```{r}
NJ_tree_rooted_collapsed <- NJ_tree_rooted
toCollapse <- match(
  which(bootstrap_rooted_NJ < 70) + length(NJ_tree_rooted$tip.label),
 NJ_tree_rooted$edge[, 2]
)
NJ_tree_rooted_collapsed$edge.length[toCollapse] <- 0
NJ_tree_rooted_collapsed <- di2multi(NJ_tree_rooted_collapsed, tol = 0.00001)
```

Affichons notre nouvel arbre :
```{r}
ggtree(NJ_tree_rooted_collapsed) %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  geom_label2(
    aes(
      subset = !isTip,
      label = label,
    )
  ) +
  ggtitle("NJ raciné avec Bootstrap et sans les noeuds faibles") +
  theme(legend.position = "right") +
  geom_rootedge(rootedge = .01) +
  theme_tree2()
```
Le comparer au précédent, comment a-t-il été modifié ? (5 min)

# Maximum de parcimonie
Rappeler le principe du maximum de parcimonie.\
Lire l'aide de la fonction `optim.parsimony()`, à quoi correspondent les arguments `tree` et `data` ? Comment le relier au principe de la méthode ? Comment l'arbre optimal est-il obtenu ? (5 min)

## Conversion de l'alignement dans le format phyDat

```{r}
# alignment_phyDat <- read.phyDat(
#   file = here("output", "alignment.fa"),
#   format = "fasta"
# )
alignment_phyDat <- alignment |> msaConvert(type = "phangorn::phyDat")
class(alignment_phyDat)
```

## Génération de l'arbre initial
Générons un arbre par Neighbour-Joining qui permettra d'initialiser l'algorithme de maximum de parcimonie.
```{r}
MP_tree_init <- alignment_BIN |> dist.dna(model = "TN93") |> NJ()
```

## Génération de l'arbre le plus parcimonieux
Utiliser la fonction `parcimony()` pour calculer le score de parcimonie de l'arbre initial.
```{r}
parsimony(MP_tree_init, alignment_phyDat)
```
Utiliser la fonction `optim.parsimony()` pour générer l'arbre le plus parcimonieux.
```{r}
MP_tree <- optim.parsimony(MP_tree_init, alignment_phyDat)
rm(MP_tree_init)
MP_tree
```
Comparer les scores de parcimonie des deux arbres.

```{r}
ggtree(MP_tree, layout = "circular") %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  ggtitle("Arbre maximum de parcimonie") +
  theme(legend.position = "right")
```
Commenter l'arbre généré.\
Comment expliquer la similarité avec les arbres précédents ? (10 min)

# Maximum de vraisemblance
Rappeler le principe du maximum de vraisemblance. (5 min)

## Initialisation
Similairement à la méthode du maximum de parcimonie, la méthode doit être initialisée avec un arbre :
```{r}
ML_tree_init <- alignment_BIN |> dist.dna(model = "TN93") |> NJ()
```

### Calcul de la vraisemblance de l'arbre initial
Utiliser la fonction `pml()` pour calculer la vraisemblance de l'arbre initial avec le paramètre `k = 4`. Ce paramètre décrit le nombre de classes de vitesses évolutives utilisées dans le modèle, la valeur `k = 4` est une valeur par défaut courante.
```{r}
pml(ML_tree_init, alignment_phyDat, k = 4)
```

La fonction a bien tourné mais elle est sensible à la nature des données, on va donc vérifier que le jeu de données est bien propre : 
```{r}
alignment_phyDat |> as.character() |> table()
```
Certains caractères de nos séquences ne correspondent pas aux bases azotées traditionnelles !\
Lire [cette page](https://www.dnabaser.com/articles/IUPAC%20ambiguity%20codes.html) et identifier à quoi correspondent les lettres différentes de a, t, c et g.\ À quoi correspondent les `'-'` ? (5 min).\

Enregistrons leur position dans un objet :
```{r}
na.posi <- which(
  apply(
    as.character(alignment_BIN),
    2,
    \(x) any(!x %in% c("a","t","g","c"))
  )
)
```

Voyons la distribution de ces lettres :\
Commenter le bloc ce code ci-après. (5 min)
```{r}
apply(
  as.character(alignment_BIN),
  2,
  \(x) sum(!x %in% c("a","t","g","c"))
) |>
  plot(
    type = "l",
    col  = "blue",
    xlab = "Position in HA segment",
    ylab = "Number of NAs"
  )
```
Retirons les lettres différentes de a, t, c et g et vérifions que ça a bien fonctionné :
```{r}
alignment_cropped <- alignment_BIN[, -na.posi]
alignment_cropped |> as.character() |> table()
```
Reconvertissons le jeu de donné trié au bon format :
```{r}
alignment_cropped_phyDat <- as.phyDat(alignment_cropped)
```

Regénérer l'arbre d'initialisation avec notre jeu de donnée nettoyé. (5 min)
```{r}
ML_tree_init <- alignment_cropped |> dist.dna(model = "TN93") |> NJ()
ML_tree_init_L <- pml(ML_tree_init, alignment_cropped_phyDat, k = 4)
ML_tree_init_L
```

## Génération de l'arbre le plus vraisemblable
Utiliser la fonction `optim.pml()` pour générer l'arbre optimal avec les paramètres `model = "GTR", inv = .2,optNni = TRUE, optBf = TRUE, optQ = TRUE, optGamma = TRUE`, ce qui correspond à un modèle GTR + G(4) + I (Generalised time reversible + Gamma(4) + Invariants) très standard pour ce genre d'application. Il est également possible d'utiliser la fonction `modelTest()` pour choisir un modèle approprié automatiquement.
```{r}
ML_tree <- optim.pml(
  ML_tree_init_L,
  model    = "GTR",
  inv      = .2,
  optNni   = TRUE,
  optBf    = TRUE,
  optQ     = TRUE,
  optGamma = TRUE
)
ML_tree
```
Comparons notre arbre optimal avec l'arbre initial généré par Neighbour-Joining :
```{r}
anova(ML_tree_init_L, ML_tree)
AIC(ML_tree_init_L, ML_tree)
```
Lire l'aide de la fonction `AIC`. À quoi sert l'indice d'Akaike ? (5 min)
Affichons notre super arbre !
```{r}
ML_tree_rooted <- ML_tree$tree |> root(outgroup = "CY012128") |> ladderize()
ggtree(ML_tree_rooted) %<+% annotations +
  geom_tiplab(aes(color = year)) +
  scale_color_viridis(option = "turbo") +
  geom_label2(
    aes(
      subset = !isTip,
      label = label,
    )
  ) +
  ggtitle("Maximum de vraisemblance") +
  theme(legend.position = "right") +
  geom_rootedge(rootedge = .01) +
  theme_tree2()
```
